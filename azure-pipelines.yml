# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  buildConfiguration: 'Release'
  dotNetSdk: '3.x'
  vmImageName: 'windows-latest'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs:
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotNetSdk)'
      inputs:
        packageType: sdk
        version: '$(dotNetSdk)'
    
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
    
    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'
  
    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration Release --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    # Package the file and uploads them as an artifact of the build
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        publishLocation: 'pipeline'
        artifactName: 'drop'
      
- stage: 'DeployTest'
  displayName: 'Deploy the web application'
  dependsOn: Build
  pool:
    vmImage: $(vmImageName)
  jobs:
  - job: 'Transform'
    variables:
        group: TestAppSettingsConfigTransformation
    steps:
    - task: PowerShell@2
      displayName: 'Degug parameters'
      inputs:
        targetType: Inline
        script: |
          Write-Host "$(Build.ArtifactStagingDirectory)"
          Write-Host "$(System.DefaultWorkingDirectory)"
          Write-Host "$(System.ArtifactsDirectory)"
          Write-Host "$(Pipeline.Workspace)"
          Write-Host "$(System.ArtifactsDirectory)"
          
    - task: ExtractFiles@1
      displayName: 'Extracting files'
      inputs:
        archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/**/*.zip'
        destinationFolder: '$(Pipeline.Workspace)/application'
        cleanDestinationFolder: true
        overwriteExistingFiles: false
        
    - task: FileTransform@1
      displayName: 'Running file tranformation'
      inputs:
        folderPath: '$(Pipeline.Workspace)/application'
        fileType: 'json'
        targetFiles: 'appsettings.json'
    - task: DeleteFiles@1
      displayName: 'Clean files'
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)/drop/'
        Contents: '*.zip'
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(Pipeline.Workspace)/application/'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/drop/$(buildConfiguration)/$(Build.BuildId).zip'
        replaceExistingArchive: true          
  - deployment: Deploy
    displayName: 'Deployment process'
    dependsOn: Transform
    environment: myc-poc-test-env
    variables:
    - group: test
    strategy:
        runOnce:
            deploy:
                steps:
                - download: current
                  artifact: drop
                - task: AzureWebApp@1
                  displayName: 'Azure App Service Deploy: website'
                  inputs:
                    azureSubscription: 'Service connection to MYC POC'
                    appName: '$(WebAppName)'
                    package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
- stage: 'Deploy_fakeprod'
  displayName: 'Deploy the web application'
  dependsOn: DeployTest
  jobs:
  - deployment: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: myc-poc-prod-env
    variables:
    - group: prod
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Service connection to MYC POC'
              appName: '$(WebAppName)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
